#!/bin/bash
#------------------------------------------------------------------------------------
# What: A quick-start BASH template script
# Author: Adam Hayward <adam at happy dot cat>
# License: http://svn.happy.cat/public/LICENSE.txt
#
# Features:
#   log "A log message"
#   debug "A debug message only displayed if '-v' option passed"
#   error "A fatal error message and exit with code:" 2
#   usage - print a usage message
#   get_options - parse command-line options, defaults below
#
# Standard command-line options:
#   -v verbose
#   -h help message
#   -V version number
# Long-format options:
#   --version
#   --help  
#
#------------------------------------------------------------------------------------
#
# example-script.sh - Short description
# 
# author:       Author of script
# contact:	    Email
# since:        Date
# 
#------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------
# SCRIPT CONFIGURATION
#------------------------------------------------------------------------------------

SCRIPT_NAME=`basename $0`

# If debug information should be shown
VERBOSE=

VERSION=0.1

# Add your own global variables here
projectName=${PWD##*/}
stackName='Stack Name Not Defined'
username='Cold Logic'

#------------------------------------------------------------------------------------
# UTILITY FUNCTIONS
#------------------------------------------------------------------------------------

# print a log a message
log () {
	echo "[${SCRIPT_NAME}]: $1" > /dev/stderr
}

# print a debug message - only outputs if VERBOSE flag is set
debug() {
	[ "$VERBOSE" ] && echo "[${SCRIPT_NAME}]: $1" > /dev/stderr
}

# print an error message and exit()
error() {
	echo "[${SCRIPT_NAME}] ERROR: $1" > /dev/stderr
	[ $# -gt 1 ] && exit $2
	exit 1
}

# Define your own script functions here
formatAllFilesInDirectory() {
	files=$(find $1 -type f -print0 | xargs -0)

	for file in $files;
	do
		if [[ ${file} != *".DS_Store"* ]];
		then
			debug "Formatting File: $file"

			newFilename=$(echo $file | sed -e "s/___StackName___/"$stackName"/g")
			debug "Renaming $file -> $newFilename"
			mv $file $newFilename

			replaceDateInFile $newFilename
			replaceFileNameInFile $newFilename
			replaceStackNameInFile $newFilename
			replaceProjectNameInFile $newFilename
			replaceUsernameInFile $newFilename
		fi
	done
}

replaceDateInFile() {
	date=`date +%Y-%m-%d`
	replaceVariableWithValueInFile "___Date___" "$date" "$1"
}

replaceFileNameInFile() {
	replaceVariableWithValueInFile "___FileName___" ${1##*/} "$1"
}

replaceStackNameInFile() {
	replaceVariableWithValueInFile "___StackName___" "$stackName" "$1"
}

replaceProjectNameInFile() {
	replaceVariableWithValueInFile "___ProjectName___" "$projectName" "$1"
}

replaceUsernameInFile() {
	replaceVariableWithValueInFile "___Username___" "$username" "$1"
}

replaceVariableWithValueInFile() {
	debug "Replacing $1 with $2"
	sed -i '' 's/'"$1"'/'"$2"'/g' $3
}

# Print a usage message
usage() {
cat << USAGE
usage: $0 [-v] [-h] -u username -p project 

Short description

OPTIONS:
-v         Show debuging messages
-h         Show this help message
-V         Show version
-u         Input Username
-p	   Input Project
USAGE
}

# Get the script options
get_options() {
	while getopts "u:p:hvV-:" OPTION
	do
		if [ $OPTION == "-" ]; then
			OPTION=$OPTARG
		fi
		case $OPTION in
			h | 'help')
				usage && exit 0;;
			V | 'version')
				echo $VERSION && exit 0;;
			u | 'username')
				username=$OPTARG;;
			p | 'project')
				projectName=$OPTARG;;
			v)
				VERBOSE=1;;
			\?) echo "Invalid option -$OPTARG" && usage && exit 1;;
		esac
	done
}

main() {
	get_options "$@"

	echo "Input the name of your new VIPER stack:"
	read stackName
	#echo "Input the language you wish to use from the following:"
	#read language

	if [ ${#stackName} -ge 0 ]
	then
		SOURCE="${BASH_SOURCE[0]}"
		while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
			DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
			SOURCE="$(readlink "$SOURCE")"
			[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
		done
		sourceTemplateDirectory="$( cd -P "$( dirname "$SOURCE" )" && pwd )/templates"

		debug "Template Directory = $sourceTemplateDirectory"

		debug "Creating Directory $stackName"
		mkdir $stackName
		
		debug "Copying Templates"
		cp -r "$sourceTemplateDirectory"/* "$stackName"/.

		if [ -e $stackName ]
		then
			formatAllFilesInDirectory $stackName
		else
			echo "Could not create $stackName folder, cancelling"
		fi
	fi
}

main "$@"
